#coding=utf-8

import tkinter as tk
from tkinter.ttk import *
from pygame.locals import * # this modele include constant which often used
import pygame, sys, random, math



# 1.define color constant
# 0-255 0 black 255 white
redColor = pygame.Color(255, 0, 0)
# background black
blackColor = pygame.Color(0, 0, 0)
# background green
# blackColor = pygame.Color(0, 80, 0)
# snake white
whiteColor = pygame.Color(255, 255, 255)


# 2.define the function to end the game
def GameOver():
    pygame.quit()
    pygame.font.quit()
    pygame.display.init()
    sys.exit()


# 3.define main function, define the function entry
def Main():

    # 3.1 initialize pygame
    pygame.init()
    # initialize the display function of charactors
    pygame.font.init()
    # initialize the display function 
    pygame.display.init()

    # 3.2 define a variable to control the global speed
    fpsClock = pygame.time.Clock()

    # 3.3 create pygame display layer , create a window
    playSurface = pygame.display.set_mode((640, 640))
    # game window name label
    pygame.display.set_caption('Greedysnake')
    # initialize the point of game
    score = 0

    # 3.4 initialize variables
    # initialize the start coordinate x,y , take upper left as the coordinate origin
    x = 100
    y = 100
    snakePosition = [x, y]
    # initialize the length of the snake, the length of list represent the length of snake, the initial length of sanke is snakeBodyNum
    snakeBodyNum = 3
    # the side length of every joint in snake
    snakeBodyLength = 20
    # the actual visible side length should be smaller than (or be equal to) the snakeBodyLength,otherwise the joint of snake body will be mixed
    snakeBodyLengthShow = 18
    # define the snake is hollow or not
    hollow = True
    #hollow = False

    # initial the 2D array represent the snake[[0,0],[0,0]...]
    snakeBody = [[0 for i in range(2)] for j in range(snakeBodyNum)]
    # assign value to the body of the snake, define the start coordinate of every joint of the snake
    for a in range(snakeBodyNum):
        for b in range(2):
            if b == 0:
                snakeBody[a][b] = (x - a * snakeBodyLength)
            else:
                snakeBody[a][b] = y


    # initial the position of the target block
    targetPosition = [300, 300]
    # define the flag which represent the target block, purpose: judge the block has been eaten of not, 1:not 2:eaten
    targetFlag = 1
    # initailize the direction of the snake
    direction = 'right'
    # define a variable represent the direction controlled by key(user press the direction key)
    changeDirection = direction
    # define the pause flag, game pause when flag is 1
    pause = 0

    # 3.5 main loop3.5
    while True:
        # control the game speed, speed up as the point increase
        fpsClock.tick(2 + score/2)
        # get event from the queue
        flag = 0
        # codes below can't be understood unless check the define and usage of the function in pygame
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.font.quit()
                pygame.display.quit()
                pygame.quit()
                sys.exit()
            # listen for the key press
            elif event.type == KEYDOWN:
                if event.key == K_RIGHT:
                    changeDirection = 'right'
                if event.key == K_LEFT:
                    changeDirection = 'left'
                if event.key == K_UP:
                    changeDirection = 'up'
                if event.key == K_DOWN:
                    changeDirection = 'down'
                if event.key == K_ESCAPE:
                    pygame.event.post(pygame.event.Event(QUIT))

                # add the pause key, p key
                if event.key == K_p:
                    pause = ~pause
                    while pause:
                        # add this codes to reset the state of the button
                        for event in pygame.event.get():
                            if event.type == KEYDOWN:
                                if event.key == K_p:
                                    pause = ~pause
                                    flag = 1

        # 3.6 confirm the direction
        if changeDirection == 'left' and not direction == 'right':
            direction = changeDirection
        if changeDirection == 'right' and not direction == 'left':
            direction = changeDirection
        if changeDirection == 'up' and not direction == 'down':
            direction = changeDirection
        if changeDirection == 'down' and not direction == 'up':
            direction = changeDirection

        # 3.7 move the head of the snake according to the direction
        if direction == 'right':
            snakePosition[0] += snakeBodyLength
        if direction == 'left':
            snakePosition[0] -= snakeBodyLength
        if direction == 'up':
            snakePosition[1] -= snakeBodyLength
        if direction == 'down':
            snakePosition[1] += snakeBodyLength

        # 3.8 the movement of the snake
        snakeBody.insert(0, list(snakePosition))

        # it means the snake eat the target block if the position of the snake and target block is same, the position of target block is 0
        if snakePosition[0] == targetPosition[0] and snakePosition[1] == targetPosition[1]:
            targetFlag = 0
            score += 1
        else:
            snakeBody.pop()

        if targetFlag == 0:
            x = random.randrange(1, 32)
            y = random.randrange(1, 24)
            targetPosition = [int(x*20), int(y*20)]
            targetFlag = 1

        # 3.9 fill the background color
        playSurface.fill(blackColor)
        for position in snakeBody:
            # the 1st variable :surface which specify a editing area, drawing interface in this area
            # the 2nd variable :color 
            # the 3rd variable :Rect which return a rectangle（（x，y），（width，height））
            # the 4th variable :width which specify the line thickness, width = 0 fill（solid）  width=1(hollow)
            # draw the snake
            pygame.draw.rect(playSurface, whiteColor, Rect(position[0], position[1], snakeBodyLengthShow, snakeBodyLengthShow), hollow)
            # draw the target block
            pygame.draw.ellipse(playSurface, redColor, Rect(targetPosition[0], targetPosition[1], 18, 18), 1)
        # draw the display area for point and speed
        pygame.draw.rect(playSurface, whiteColor, Rect(0, 480, 640, 160))
        # add score,speed,exit and pause
        font = pygame.font.Font(None, 30)
        scoreSurface = font.render("Score:%d" %(score*10), True, (0, 0, 0), None)
        speedSurface = font.render("Speed:%d" %score, True, (0, 0, 0), None)
        exitSurface = font.render("Press Esc to exit." , True, (0, 0, 0), None)
        pauseSurface = font.render("Press P to Pause.", True, (0, 0, 0), None)
        # draw score,speed,exit and pause
        scoreRect = pygame.draw.rect(scoreSurface, whiteColor, Rect(0, 480, 640, 160))
        speedRect = pygame.draw.rect(speedSurface, whiteColor, Rect(0, 510, 640, 160))
        exitRect = pygame.draw.rect(exitSurface, whiteColor, Rect(0, 540, 640, 160))
        pauseRect = pygame.draw.rect(pauseSurface, whiteColor, Rect(0, 570, 640, 160))
        playSurface.blit(scoreSurface, scoreRect, area=None, special_flags=0)
        playSurface.blit(speedSurface, speedRect, area=None, special_flags=0)
        playSurface.blit(exitSurface, exitRect, area=None, special_flags=0)
        playSurface.blit(pauseSurface, pauseRect, area=None, special_flags=0)

        # 4 refresh the display area
        pygame.display.flip()
        # judge the game is over or not, game over as the snake goes out of bound
        if snakePosition[0] >620 or snakePosition[0] < 0:
            GameOver()
        elif snakePosition[1] > 460 or snakePosition[1] < 0 :
            GameOver()
        if flag == 1:
            # fix the program acceleration after pausing the game
            r = int(500/(math.log2(score+2)))
            pygame.time.wait(r)


# 5 the entry of main function
if __name__ == '__main__':
    Main()
